// Open Source Initiative OSI - The MIT License (MIT):Licensing
//
// The MIT License (MIT)
// Copyright (c) 2012 Daniele Mazzini - https://github.com/danmaz74
//
// Version: 1.1
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
// is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
// OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


var ABalytics = (function (window, document, undefined) {
    /* exported ABalytics */


    var readCookie = function (name) {
        var nameEQ = name + '=',
            ca = document.cookie.split(';'),
            i,
            c;
        for (i = 0; i < ca.length; i++) {
            c = ca[i];
            while (c.charAt(0) === ' ') {
                c = c.substring(1, c.length);
            }
            if (c.indexOf(nameEQ) === 0) {
                return c.substring(nameEQ.length, c.length);
            }
        }
        return null;
    };

    var getElementsByClassName = function (className) {
        var hasClassName = new RegExp('(?:^|\\s)' + className + '(?:$|\\s)'),
            allElements = document.getElementsByTagName('*'),
            results = [],
            element,
            elementClass,
            i = 0;

        for (i = 0;
            ((element = allElements[i]) !== null) && (element !== undefined); i++) {
            elementClass = element.className;
            if (elementClass && elementClass.indexOf(className) !== -1 && hasClassName.test(
                elementClass)) {
                results.push(element);
            }
        }

        return results;
    };

    return {
        changes: [],
        // for each experiment, load a variant if already saved for this session, or pick a random one
        // slot can either be a dimension or a custom variable
        init: function (config, slot) {
            var experiment,
                variants,
                variant,
                variantId,
                change;

            if (typeof (slot) === 'undefined') {
                slot = 1;
            }

            for (experiment in config) {
                variants = config[experiment];

                // read the saved variant for this experiment in this session, or pick a random one and save it
                variantId = readCookie('ABalytics_' + experiment);
                if (!variantId) {


                  // pick a random variant

                  var variant = null;
                  var rnd = Math.random();
                  for (var i=0; i < variants.length; i++) {
                    if (i === 0) {
                      if (rnd <= variants[0].weight) {
                        variant = variants[0];
                        break;
                      }
                    } else if (rnd > variants[i - 1].weight && rnd <= variants[i].weight) {
                      variant = variants[i];
                      break;
                    }

                  }

                  document.cookie = 'ABalytics_' + experiment + '=' + variant.name + '; path=/';
                } else {
                  var variant = null;
                  for (var x = 0; x < variants.length; x++) {
                    if (variants[x].name === variantId) {
                      variant = variants[x];
                      break;
                    }
                  }
                }

                this.changes.push([experiment, {
                  isTemplate: variant.from_template,
                  testId: variant.test_id,
                  variantId: variant.variant_id,
                  content: variant.content,
                  contentId: variant.content_id
                }]);
                slot++;
            }
        },
        // apply the selected variants for each experiment
        applyHtml: function () {
            var elements,
                change,
                i,
                j;


            for (i = 0; i < this.changes.length; i++) {

                change = this.changes[i];
                var variant = change[1];

                if (variant.isTemplate) {


                  var variantSelector = 'content-variant-' + variant.testId + '-' + variant.variantId;
                  variantElem = document.getElementById ? document.getElementById(variantSelector) : getElementById(variantSelector);

                  // hide the primary content; insert the variant as a sibling, then hook up click handlers
                  $('div[data-ab='+variant.contentId+']').hide().before($(variantElem).contents());
                  $('div[data-ab='+variant.contentId+']').prev().find('a').click(function () {

                    // don't record clicks for links marked exempt
                    if (! $(this).data('exempt') == true) {

                      $.ajax(MVTESTS.tracking_url, {

                        data: {
                          test_id: variant.testId,
                          option_id: variant.variantId,
                          element: this.text
                        },
                        type: 'POST'
                      });
                    }

                  });


                } else {
                  elements = document.getElementsByClassName ? document.getElementsByClassName(
                    change[1].contentId) : getElementsByClassName(change[1].contentId);

                  for (j = 0; j < elements.length; j++) {
                      elements[j].innerHTML = change[1].content;
                  }
                }

            }
        },

        overrideTemplate: function(testId) {



          //find which option was selected for this test
          var variant = null;
          for (i = 0; i < this.changes.length; i++) {
            if (this.changes[i][1].testId === testId){
              variant = this.changes[i][1];
              break;
            }
          }

          var variantSelector = 'content-variant-' + variant.testId + '-' + variant.variantId;
          variantElem = document.getElementById ? document.getElementById(variantSelector) : getElementById(variantSelector);

          // hide the primary content; insert the variant as a sibling, then hook up click handlers
          $('div[data-ab='+variant.contentId+']').hide().before($(variantElem).contents());
          $('div[data-ab='+variant.contentId+']').prev().find('a').click(function () {

            // all links are exempt from tracking except ones marked with reportevent
            if ( $(this).data('reportevent') == true) {

              $.ajax(MVTESTS.tracking_url, {

                data: {
                  test_id: variant.testId,
                  option_id: variant.variantId,
                  element: this.text
                },
                type: 'POST'
              });
            }

          });
        }
    };
})(window, document);
